{"version":3,"file":"index.esm.js","sources":["../src/utils/default-handlers.ts","../src/utils/tree-data-utils.ts","../src/utils/classnames.ts","../src/node-renderer-default.tsx","../src/placeholder-renderer-default.tsx","../src/tree-node.tsx","../src/tree-placeholder.tsx","../src/utils/dnd-manager.ts","../src/utils/generic-utils.ts","../src/utils/memoized-tree-data-utils.ts","../src/react-sortable-tree.tsx"],"sourcesContent":["import { ReactNode } from 'react'\n\nexport interface GetTreeItemChildren {\n  done: (children: TreeItem[]) => void\n  node: TreeItem\n  path: number[]\n  lowerSiblingCounts: number[]\n  treeIndex: number\n}\n\nexport type GetTreeItemChildrenFn = (data: GetTreeItemChildren) => void\n\nexport type GetNodeKeyFunction = (data: TreeIndex & TreeNode) => string | number\n\nexport interface TreeItem {\n  title?: ReactNode | undefined\n  subtitle?: ReactNode | undefined\n  expanded?: boolean | undefined\n  children?: TreeItem[] | GetTreeItemChildrenFn | undefined\n  [x: string]: any\n}\n\nexport interface TreeNode {\n  node: TreeItem\n}\n\nexport interface TreePath {\n  path: number[]\n}\n\nexport interface TreeIndex {\n  treeIndex: number\n}\n\nexport interface FullTree {\n  treeData: TreeItem[] | undefined\n}\n\nexport interface NodeData extends TreeNode, TreePath, TreeIndex {}\n\nexport interface SearchData extends NodeData {\n  searchQuery: string\n}\n\nexport const defaultGetNodeKey = ({ treeIndex }: TreeIndex) => treeIndex\n\n// Cheap hack to get the text of a react object\nconst getReactElementText = (parent: any) => {\n  if (typeof parent === 'string') {\n    return parent\n  }\n\n  if (\n    parent === undefined ||\n    typeof parent !== 'object' ||\n    !parent.props ||\n    !parent.props.children ||\n    (typeof parent.props.children !== 'string' &&\n      typeof parent.props.children !== 'object')\n  ) {\n    return ''\n  }\n\n  if (typeof parent.props.children === 'string') {\n    return parent.props.children\n  }\n\n  return parent.props.children\n    .map((child: any) => getReactElementText(child))\n    .join('')\n}\n\n// Search for a query string inside a node property\nconst stringSearch = (\n  key: string,\n  searchQuery: string,\n  node: TreeItem,\n  path: number[],\n  treeIndex: number\n) => {\n  if (typeof node[key] === 'function') {\n    // Search within text after calling its function to generate the text\n    return String(node[key]({ node, path, treeIndex })).includes(searchQuery)\n  }\n  if (typeof node[key] === 'object') {\n    // Search within text inside react elements\n    return getReactElementText(node[key]).includes(searchQuery)\n  }\n\n  // Search within string\n  return node[key] && String(node[key]).includes(searchQuery)\n}\n\nexport const defaultSearchMethod = ({\n  node,\n  path,\n  treeIndex,\n  searchQuery,\n}: SearchData): boolean => {\n  return (\n    stringSearch('title', searchQuery, node, path, treeIndex) ||\n    stringSearch('subtitle', searchQuery, node, path, treeIndex)\n  )\n}\n","// @ts-nocheck\n\nimport {\n  FullTree,\n  GetNodeKeyFunction,\n  GetTreeItemChildren,\n  NodeData,\n  SearchData,\n  TreeIndex,\n  TreeItem,\n  TreeNode,\n  TreePath,\n} from '..'\n\nexport type WalkAndMapFunctionParameters = FullTree & {\n  getNodeKey: GetNodeKeyFunction\n  callback: Function\n  ignoreCollapsed?: boolean | undefined\n}\n\nexport interface FlatDataItem extends TreeNode, TreePath {\n  lowerSiblingCounts: number[]\n  parentNode: TreeItem\n}\n\n/**\n * Performs a depth-first traversal over all of the node descendants,\n * incrementing currentIndex by 1 for each\n */\nconst getNodeDataAtTreeIndexOrNextIndex = ({\n  targetIndex,\n  node,\n  currentIndex,\n  getNodeKey,\n  path = [],\n  lowerSiblingCounts = [],\n  ignoreCollapsed = true,\n  isPseudoRoot = false,\n}: {\n  targetIndex: number\n  node: TreeItem\n  currentIndex: number\n  getNodeKey: GetNodeKeyFunction\n  path: number[]\n  lowerSiblingCounts: number[]\n  ignoreCollapsed: boolean\n  isPseudoRoot: boolean\n}) => {\n  // The pseudo-root is not considered in the path\n  const selfPath = isPseudoRoot\n    ? []\n    : [...path, getNodeKey({ node, treeIndex: currentIndex })]\n\n  // Return target node when found\n  if (currentIndex === targetIndex) {\n    return {\n      node,\n      lowerSiblingCounts,\n      path: selfPath,\n    }\n  }\n\n  // Add one and continue for nodes with no children or hidden children\n  if (!node?.children || (ignoreCollapsed && node?.expanded !== true)) {\n    return { nextIndex: currentIndex + 1 }\n  }\n\n  // Iterate over each child and their descendants and return the\n  // target node if childIndex reaches the targetIndex\n  let childIndex = currentIndex + 1\n  const childCount = node.children.length\n  for (let i = 0; i < childCount; i += 1) {\n    const result = getNodeDataAtTreeIndexOrNextIndex({\n      ignoreCollapsed,\n      getNodeKey,\n      targetIndex,\n      node: node.children[i],\n      currentIndex: childIndex,\n      lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n      path: selfPath,\n    })\n\n    if (result.node) {\n      return result\n    }\n\n    childIndex = result.nextIndex\n  }\n\n  // If the target node is not found, return the farthest traversed index\n  return { nextIndex: childIndex }\n}\n\nexport const getDescendantCount = ({\n  node,\n  ignoreCollapsed = true,\n}: TreeNode & { ignoreCollapsed?: boolean | undefined }): number => {\n  return (\n    getNodeDataAtTreeIndexOrNextIndex({\n      getNodeKey: () => {},\n      ignoreCollapsed,\n      node,\n      currentIndex: 0,\n      targetIndex: -1,\n    }).nextIndex - 1\n  )\n}\n\nconst walkDescendants = ({\n  callback,\n  getNodeKey,\n  ignoreCollapsed,\n  isPseudoRoot = false,\n  node,\n  parentNode = undefined,\n  currentIndex,\n  path = [],\n  lowerSiblingCounts = [],\n}) => {\n  // The pseudo-root is not considered in the path\n  const selfPath = isPseudoRoot\n    ? []\n    : [...path, getNodeKey({ node, treeIndex: currentIndex })]\n  const selfInfo = isPseudoRoot\n    ? undefined\n    : {\n        node,\n        parentNode,\n        path: selfPath,\n        lowerSiblingCounts,\n        treeIndex: currentIndex,\n      }\n\n  if (!isPseudoRoot) {\n    const callbackResult = callback(selfInfo)\n\n    // Cut walk short if the callback returned false\n    if (callbackResult === false) {\n      return false\n    }\n  }\n\n  // Return self on nodes with no children or hidden children\n  if (\n    !node.children ||\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n  ) {\n    return currentIndex\n  }\n\n  // Get all descendants\n  let childIndex = currentIndex\n  const childCount = node.children.length\n  if (typeof node.children !== 'function') {\n    for (let i = 0; i < childCount; i += 1) {\n      childIndex = walkDescendants({\n        callback,\n        getNodeKey,\n        ignoreCollapsed,\n        node: node.children[i],\n        parentNode: isPseudoRoot ? undefined : node,\n        currentIndex: childIndex + 1,\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n        path: selfPath,\n      })\n\n      // Cut walk short if the callback returned false\n      if (childIndex === false) {\n        return false\n      }\n    }\n  }\n\n  return childIndex\n}\n\nconst mapDescendants = ({\n  callback,\n  getNodeKey,\n  ignoreCollapsed,\n  isPseudoRoot = false,\n  node,\n  parentNode = undefined,\n  currentIndex,\n  path = [],\n  lowerSiblingCounts = [],\n}) => {\n  const nextNode = { ...node }\n\n  // The pseudo-root is not considered in the path\n  const selfPath = isPseudoRoot\n    ? []\n    : [...path, getNodeKey({ node: nextNode, treeIndex: currentIndex })]\n  const selfInfo = {\n    node: nextNode,\n    parentNode,\n    path: selfPath,\n    lowerSiblingCounts,\n    treeIndex: currentIndex,\n  }\n\n  // Return self on nodes with no children or hidden children\n  if (\n    !nextNode.children ||\n    (nextNode.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n  ) {\n    return {\n      treeIndex: currentIndex,\n      node: callback(selfInfo),\n    }\n  }\n\n  // Get all descendants\n  let childIndex = currentIndex\n  const childCount = nextNode.children.length\n  if (typeof nextNode.children !== 'function') {\n    nextNode.children = nextNode.children.map((child, i) => {\n      const mapResult = mapDescendants({\n        callback,\n        getNodeKey,\n        ignoreCollapsed,\n        node: child,\n        parentNode: isPseudoRoot ? undefined : nextNode,\n        currentIndex: childIndex + 1,\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n        path: selfPath,\n      })\n      childIndex = mapResult.treeIndex\n\n      return mapResult.node\n    })\n  }\n\n  return {\n    node: callback(selfInfo),\n    treeIndex: childIndex,\n  }\n}\n\nexport const getVisibleNodeCount = ({ treeData }: FullTree): number => {\n  const traverse = (node) => {\n    if (\n      !node.children ||\n      node.expanded !== true ||\n      typeof node.children === 'function'\n    ) {\n      return 1\n    }\n\n    return (\n      1 +\n      node.children.reduce(\n        (total, currentNode) => total + traverse(currentNode),\n        0\n      )\n    )\n  }\n\n  return treeData.reduce(\n    (total, currentNode) => total + traverse(currentNode),\n    0\n  )\n}\n\nexport const getVisibleNodeInfoAtIndex = ({\n  treeData,\n  index: targetIndex,\n  getNodeKey,\n}: FullTree & {\n  index: number\n  getNodeKey: GetNodeKeyFunction\n}): (TreeNode & TreePath & { lowerSiblingCounts: number[] }) | null => {\n  if (!treeData || treeData.length === 0) {\n    return undefined\n  }\n\n  // Call the tree traversal with a pseudo-root node\n  const result = getNodeDataAtTreeIndexOrNextIndex({\n    targetIndex,\n    getNodeKey,\n    node: {\n      children: treeData,\n      expanded: true,\n    },\n    currentIndex: -1,\n    path: [],\n    lowerSiblingCounts: [],\n    isPseudoRoot: true,\n  })\n\n  if (result.node) {\n    return result\n  }\n\n  return undefined\n}\n\nexport const walk = ({\n  treeData,\n  getNodeKey,\n  callback,\n  ignoreCollapsed = true,\n}: WalkAndMapFunctionParameters): void => {\n  if (!treeData || treeData.length === 0) {\n    return\n  }\n\n  walkDescendants({\n    callback,\n    getNodeKey,\n    ignoreCollapsed,\n    isPseudoRoot: true,\n    node: { children: treeData },\n    currentIndex: -1,\n    path: [],\n    lowerSiblingCounts: [],\n  })\n}\n\nexport const map = ({\n  treeData,\n  getNodeKey,\n  callback,\n  ignoreCollapsed = true,\n}: WalkAndMapFunctionParameters): TreeItem[] => {\n  if (!treeData || treeData.length === 0) {\n    return []\n  }\n\n  return mapDescendants({\n    callback,\n    getNodeKey,\n    ignoreCollapsed,\n    isPseudoRoot: true,\n    node: { children: treeData },\n    currentIndex: -1,\n    path: [],\n    lowerSiblingCounts: [],\n  }).node.children\n}\n\nexport const toggleExpandedForAll = ({\n  treeData,\n  expanded = true,\n}: FullTree & {\n  expanded?: boolean | undefined\n}): TreeItem[] => {\n  return map({\n    treeData,\n    callback: ({ node }) => ({ ...node, expanded }),\n    getNodeKey: ({ treeIndex }) => treeIndex,\n    ignoreCollapsed: false,\n  })\n}\n\nexport const changeNodeAtPath = ({\n  treeData,\n  path,\n  newNode,\n  getNodeKey,\n  ignoreCollapsed = true,\n}: FullTree &\n  TreePath & {\n    newNode: Function | any\n    getNodeKey: GetNodeKeyFunction\n    ignoreCollapsed?: boolean | undefined\n  }): TreeItem[] => {\n  const RESULT_MISS = 'RESULT_MISS'\n  const traverse = ({\n    isPseudoRoot = false,\n    node,\n    currentTreeIndex,\n    pathIndex,\n  }) => {\n    if (\n      !isPseudoRoot &&\n      getNodeKey({ node, treeIndex: currentTreeIndex }) !== path[pathIndex]\n    ) {\n      return RESULT_MISS\n    }\n\n    if (pathIndex >= path.length - 1) {\n      // If this is the final location in the path, return its changed form\n      return typeof newNode === 'function'\n        ? newNode({ node, treeIndex: currentTreeIndex })\n        : newNode\n    }\n    if (!node.children) {\n      // If this node is part of the path, but has no children, return the unchanged node\n      throw new Error('Path referenced children of node with no children.')\n    }\n\n    let nextTreeIndex = currentTreeIndex + 1\n    for (let i = 0; i < node.children.length; i += 1) {\n      const result = traverse({\n        node: node.children[i],\n        currentTreeIndex: nextTreeIndex,\n        pathIndex: pathIndex + 1,\n      })\n\n      // If the result went down the correct path\n      if (result !== RESULT_MISS) {\n        if (result) {\n          // If the result was truthy (in this case, an object),\n          //  pass it to the next level of recursion up\n          return {\n            ...node,\n            children: [\n              ...node.children.slice(0, i),\n              result,\n              ...node.children.slice(i + 1),\n            ],\n          }\n        }\n        // If the result was falsy (returned from the newNode function), then\n        //  delete the node from the array.\n        return {\n          ...node,\n          children: [\n            ...node.children.slice(0, i),\n            ...node.children.slice(i + 1),\n          ],\n        }\n      }\n\n      nextTreeIndex +=\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed })\n    }\n\n    return RESULT_MISS\n  }\n\n  // Use a pseudo-root node in the beginning traversal\n  const result = traverse({\n    node: { children: treeData },\n    currentTreeIndex: -1,\n    pathIndex: -1,\n    isPseudoRoot: true,\n  })\n\n  if (result === RESULT_MISS) {\n    throw new Error('No node found at the given path.')\n  }\n\n  return result.children\n}\n\nexport const removeNodeAtPath = ({\n  treeData,\n  path,\n  getNodeKey,\n  ignoreCollapsed = true,\n}: FullTree &\n  TreePath & {\n    getNodeKey: GetNodeKeyFunction\n    ignoreCollapsed?: boolean | undefined\n  }): TreeItem[] => {\n  return changeNodeAtPath({\n    treeData,\n    path,\n    getNodeKey,\n    ignoreCollapsed,\n    newNode: undefined, // Delete the node\n  })\n}\n\nexport const removeNode = ({\n  treeData,\n  path,\n  getNodeKey,\n  ignoreCollapsed = true,\n}: FullTree &\n  TreePath & {\n    getNodeKey: GetNodeKeyFunction\n    ignoreCollapsed?: boolean | undefined\n  }): (FullTree & TreeNode & TreeIndex) | undefined => {\n  let removedNode\n  let removedTreeIndex\n  const nextTreeData = changeNodeAtPath({\n    treeData,\n    path,\n    getNodeKey,\n    ignoreCollapsed,\n    newNode: ({ node, treeIndex }) => {\n      // Store the target node and delete it from the tree\n      removedNode = node\n      removedTreeIndex = treeIndex\n\n      return undefined\n    },\n  })\n\n  return {\n    treeData: nextTreeData,\n    node: removedNode,\n    treeIndex: removedTreeIndex,\n  }\n}\n\nexport const getNodeAtPath = ({\n  treeData,\n  path,\n  getNodeKey,\n  ignoreCollapsed = true,\n}: FullTree &\n  TreePath & {\n    getNodeKey: GetNodeKeyFunction\n    ignoreCollapsed?: boolean | undefined\n  }): (TreeNode & TreeIndex) | null => {\n  let foundNodeInfo\n\n  try {\n    changeNodeAtPath({\n      treeData,\n      path,\n      getNodeKey,\n      ignoreCollapsed,\n      newNode: ({ node, treeIndex }: GetTreeItemChildren) => {\n        foundNodeInfo = { node, treeIndex }\n        return node\n      },\n    })\n  } catch {\n    // Ignore the error -- the null return will be explanation enough\n  }\n\n  return foundNodeInfo\n}\n\nexport const addNodeUnderParent = ({\n  treeData,\n  newNode,\n  parentKey = undefined,\n  getNodeKey,\n  ignoreCollapsed = true,\n  expandParent = false,\n  addAsFirstChild = false,\n}: FullTree & {\n  newNode: TreeItem\n  parentKey?: number | string | undefined | null\n  getNodeKey: GetNodeKeyFunction\n  ignoreCollapsed?: boolean | undefined\n  expandParent?: boolean | undefined\n  addAsFirstChild?: boolean | undefined\n}): FullTree & TreeIndex => {\n  if (parentKey === null || parentKey === undefined) {\n    return addAsFirstChild\n      ? {\n          treeData: [newNode, ...(treeData || [])],\n          treeIndex: 0,\n        }\n      : {\n          treeData: [...(treeData || []), newNode],\n          treeIndex: (treeData || []).length,\n        }\n  }\n\n  let insertedTreeIndex\n  let hasBeenAdded = false\n  const changedTreeData = map({\n    treeData,\n    getNodeKey,\n    ignoreCollapsed,\n    callback: ({ node, treeIndex, path }: GetTreeItemChildren) => {\n      const key = path ? path.at(-1) : undefined\n      // Return nodes that are not the parent as-is\n      if (hasBeenAdded || key !== parentKey) {\n        return node\n      }\n      hasBeenAdded = true\n\n      const parentNode = {\n        ...node,\n      }\n\n      if (expandParent) {\n        parentNode.expanded = true\n      }\n\n      // If no children exist yet, just add the single newNode\n      if (!parentNode.children) {\n        insertedTreeIndex = treeIndex + 1\n        return {\n          ...parentNode,\n          children: [newNode],\n        }\n      }\n\n      if (typeof parentNode.children === 'function') {\n        throw new TypeError('Cannot add to children defined by a function')\n      }\n\n      let nextTreeIndex = treeIndex + 1\n      for (let i = 0; i < parentNode.children.length; i += 1) {\n        nextTreeIndex +=\n          1 +\n          getDescendantCount({ node: parentNode.children[i], ignoreCollapsed })\n      }\n\n      insertedTreeIndex = nextTreeIndex\n\n      const children = addAsFirstChild\n        ? [newNode, ...parentNode.children]\n        : [...parentNode.children, newNode]\n\n      return {\n        ...parentNode,\n        children,\n      }\n    },\n  })\n\n  if (!hasBeenAdded) {\n    throw new Error('No node found with the given key.')\n  }\n\n  return {\n    treeData: changedTreeData,\n    treeIndex: insertedTreeIndex,\n  }\n}\n\nconst addNodeAtDepthAndIndex = ({\n  targetDepth,\n  minimumTreeIndex,\n  newNode,\n  ignoreCollapsed,\n  expandParent,\n  isPseudoRoot = false,\n  isLastChild,\n  node,\n  currentIndex,\n  currentDepth,\n  getNodeKey,\n  path = [],\n}) => {\n  const selfPath = (n) =>\n    isPseudoRoot\n      ? []\n      : [...path, getNodeKey({ node: n, treeIndex: currentIndex })]\n\n  // If the current position is the only possible place to add, add it\n  if (\n    currentIndex >= minimumTreeIndex - 1 ||\n    (isLastChild && !(node.children && node.children.length > 0))\n  ) {\n    if (typeof node.children === 'function') {\n      throw new TypeError('Cannot add to children defined by a function')\n    } else {\n      const extraNodeProps = expandParent ? { expanded: true } : {}\n      const nextNode = {\n        ...node,\n\n        ...extraNodeProps,\n        children: node.children ? [newNode, ...node.children] : [newNode],\n      }\n\n      return {\n        node: nextNode,\n        nextIndex: currentIndex + 2,\n        insertedTreeIndex: currentIndex + 1,\n        parentPath: selfPath(nextNode),\n        parentNode: isPseudoRoot ? undefined : nextNode,\n      }\n    }\n  }\n\n  // If this is the target depth for the insertion,\n  // i.e., where the newNode can be added to the current node's children\n  if (currentDepth >= targetDepth - 1) {\n    // Skip over nodes with no children or hidden children\n    if (\n      !node.children ||\n      typeof node.children === 'function' ||\n      (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n    ) {\n      return { node, nextIndex: currentIndex + 1 }\n    }\n\n    // Scan over the children to see if there's a place among them that fulfills\n    // the minimumTreeIndex requirement\n    let childIndex = currentIndex + 1\n    let insertedTreeIndex\n    let insertIndex\n    for (let i = 0; i < node.children.length; i += 1) {\n      // If a valid location is found, mark it as the insertion location and\n      // break out of the loop\n      if (childIndex >= minimumTreeIndex) {\n        insertedTreeIndex = childIndex\n        insertIndex = i\n        break\n      }\n\n      // Increment the index by the child itself plus the number of descendants it has\n      childIndex +=\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed })\n    }\n\n    // If no valid indices to add the node were found\n    if (insertIndex === null || insertIndex === undefined) {\n      // If the last position in this node's children is less than the minimum index\n      // and there are more children on the level of this node, return without insertion\n      if (childIndex < minimumTreeIndex && !isLastChild) {\n        return { node, nextIndex: childIndex }\n      }\n\n      // Use the last position in the children array to insert the newNode\n      insertedTreeIndex = childIndex\n      insertIndex = node.children.length\n    }\n\n    // Insert the newNode at the insertIndex\n    const nextNode = {\n      ...node,\n      children: [\n        ...node.children.slice(0, insertIndex),\n        newNode,\n        ...node.children.slice(insertIndex),\n      ],\n    }\n\n    // Return node with successful insert result\n    return {\n      node: nextNode,\n      nextIndex: childIndex,\n      insertedTreeIndex,\n      parentPath: selfPath(nextNode),\n      parentNode: isPseudoRoot ? undefined : nextNode,\n    }\n  }\n\n  // Skip over nodes with no children or hidden children\n  if (\n    !node.children ||\n    typeof node.children === 'function' ||\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n  ) {\n    return { node, nextIndex: currentIndex + 1 }\n  }\n\n  // Get all descendants\n  let insertedTreeIndex\n  let pathFragment\n  let parentNode\n  let childIndex = currentIndex + 1\n  let newChildren = node.children\n  if (typeof newChildren !== 'function') {\n    newChildren = newChildren.map((child, i) => {\n      if (insertedTreeIndex !== null && insertedTreeIndex !== undefined) {\n        return child\n      }\n\n      const mapResult = addNodeAtDepthAndIndex({\n        targetDepth,\n        minimumTreeIndex,\n        newNode,\n        ignoreCollapsed,\n        expandParent,\n        isLastChild: isLastChild && i === newChildren.length - 1,\n        node: child,\n        currentIndex: childIndex,\n        currentDepth: currentDepth + 1,\n        getNodeKey,\n        path: [], // Cannot determine the parent path until the children have been processed\n      })\n\n      if ('insertedTreeIndex' in mapResult) {\n        ;({\n          insertedTreeIndex,\n          parentNode,\n          parentPath: pathFragment,\n        } = mapResult)\n      }\n\n      childIndex = mapResult.nextIndex\n\n      return mapResult.node\n    })\n  }\n\n  const nextNode = { ...node, children: newChildren }\n  const result = {\n    node: nextNode,\n    nextIndex: childIndex,\n  }\n\n  if (insertedTreeIndex !== null && insertedTreeIndex !== undefined) {\n    result.insertedTreeIndex = insertedTreeIndex\n    result.parentPath = [...selfPath(nextNode), ...pathFragment]\n    result.parentNode = parentNode\n  }\n\n  return result\n}\n\nexport const insertNode = ({\n  treeData,\n  depth: targetDepth,\n  minimumTreeIndex,\n  newNode,\n  getNodeKey,\n  ignoreCollapsed = true,\n  expandParent = false,\n}: FullTree & {\n  depth: number\n  newNode: TreeItem\n  minimumTreeIndex: number\n  ignoreCollapsed?: boolean | undefined\n  expandParent?: boolean | undefined\n  getNodeKey: GetNodeKeyFunction\n}): FullTree & TreeIndex & TreePath & { parentNode: TreeItem | null } => {\n  if (!treeData && targetDepth === 0) {\n    return {\n      treeData: [newNode],\n      treeIndex: 0,\n      path: [getNodeKey({ node: newNode, treeIndex: 0 })],\n      parentNode: undefined,\n    }\n  }\n\n  const insertResult = addNodeAtDepthAndIndex({\n    targetDepth,\n    minimumTreeIndex,\n    newNode,\n    ignoreCollapsed,\n    expandParent,\n    getNodeKey,\n    isPseudoRoot: true,\n    isLastChild: true,\n    node: { children: treeData },\n    currentIndex: -1,\n    currentDepth: -1,\n  })\n\n  if (!('insertedTreeIndex' in insertResult)) {\n    throw new Error('No suitable position found to insert.')\n  }\n\n  const treeIndex = insertResult.insertedTreeIndex\n  return {\n    treeData: insertResult.node.children,\n    treeIndex,\n    path: [\n      ...insertResult.parentPath,\n      getNodeKey({ node: newNode, treeIndex }),\n    ],\n    parentNode: insertResult.parentNode,\n  }\n}\n\nexport const getFlatDataFromTree = ({\n  treeData,\n  getNodeKey,\n  ignoreCollapsed = true,\n}: FullTree & {\n  getNodeKey: GetNodeKeyFunction\n  ignoreCollapsed?: boolean | undefined\n}): FlatDataItem[] => {\n  if (!treeData || treeData.length === 0) {\n    return []\n  }\n\n  const flattened = []\n  walk({\n    treeData,\n    getNodeKey,\n    ignoreCollapsed,\n    callback: (nodeInfo) => {\n      flattened.push(nodeInfo)\n    },\n  })\n\n  return flattened\n}\n\nexport const getTreeFromFlatData = ({\n  flatData,\n  getKey = (node) => node.id,\n  getParentKey = (node) => node.parentId,\n  rootKey = '0',\n}: {\n  flatData: any\n  getKey: (node: any) => string\n  getParentKey: (node: any) => string\n  rootKey: string | null\n}) => {\n  if (!flatData) {\n    return []\n  }\n\n  const childrenToParents = {}\n  for (const child of flatData) {\n    const parentKey = getParentKey(child)\n\n    if (parentKey in childrenToParents) {\n      childrenToParents[parentKey].push(child)\n    } else {\n      childrenToParents[parentKey] = [child]\n    }\n  }\n\n  if (!(rootKey in childrenToParents)) {\n    return []\n  }\n\n  const trav = (parent) => {\n    const parentKey = getKey(parent)\n    if (parentKey in childrenToParents) {\n      return {\n        ...parent,\n        children: childrenToParents[parentKey].map((child) => trav(child)),\n      }\n    }\n\n    return { ...parent }\n  }\n\n  return childrenToParents[rootKey].map((child) => trav(child))\n}\n\nexport const isDescendant = (older: TreeItem, younger: TreeItem): boolean => {\n  return (\n    !!older.children &&\n    typeof older.children !== 'function' &&\n    older.children.some(\n      (child) => child === younger || isDescendant(child, younger)\n    )\n  )\n}\n\nexport const getDepth = (node: TreeItem, depth = 0): number => {\n  if (!node.children) {\n    return depth\n  }\n\n  if (typeof node.children === 'function') {\n    return depth + 1\n  }\n\n  return node.children.reduce(\n    (deepest, child) => Math.max(deepest, getDepth(child, depth + 1)),\n    depth\n  )\n}\n\nexport const find = ({\n  getNodeKey,\n  treeData,\n  searchQuery,\n  searchMethod,\n  searchFocusOffset,\n  expandAllMatchPaths = false,\n  expandFocusMatchPaths = true,\n}: FullTree & {\n  getNodeKey: GetNodeKeyFunction\n  searchQuery?: string | number | undefined\n  searchMethod: (data: SearchData) => boolean\n  searchFocusOffset?: number | undefined\n  expandAllMatchPaths?: boolean | undefined\n  expandFocusMatchPaths?: boolean | undefined\n}): { matches: NodeData[] } & FullTree => {\n  let matchCount = 0\n  const trav = ({ isPseudoRoot = false, node, currentIndex, path = [] }) => {\n    let matches: any[] = []\n    let isSelfMatch = false\n    let hasFocusMatch = false\n    // The pseudo-root is not considered in the path\n    const selfPath = isPseudoRoot\n      ? []\n      : [...path, getNodeKey({ node, treeIndex: currentIndex })]\n    const extraInfo = isPseudoRoot\n      ? undefined\n      : {\n          path: selfPath,\n          treeIndex: currentIndex,\n        }\n\n    // Nodes with with children that aren't lazy\n    const hasChildren =\n      node.children &&\n      typeof node.children !== 'function' &&\n      node.children.length > 0\n\n    // Examine the current node to see if it is a match\n    if (!isPseudoRoot && searchMethod({ ...extraInfo, node, searchQuery })) {\n      if (matchCount === searchFocusOffset) {\n        hasFocusMatch = true\n      }\n\n      // Keep track of the number of matching nodes, so we know when the searchFocusOffset\n      //  is reached\n      matchCount += 1\n\n      // We cannot add this node to the matches right away, as it may be changed\n      //  during the search of the descendants. The entire node is used in\n      //  comparisons between nodes inside the `matches` and `treeData` results\n      //  of this method (`find`)\n      isSelfMatch = true\n    }\n\n    let childIndex = currentIndex\n    const newNode = { ...node }\n    if (hasChildren) {\n      // Get all descendants\n      newNode.children = newNode.children.map((child) => {\n        const mapResult = trav({\n          node: child,\n          currentIndex: childIndex + 1,\n          path: selfPath,\n        })\n\n        // Ignore hidden nodes by only advancing the index counter to the returned treeIndex\n        // if the child is expanded.\n        //\n        // The child could have been expanded from the start,\n        // or expanded due to a matching node being found in its descendants\n        if (mapResult.node.expanded) {\n          childIndex = mapResult.treeIndex\n        } else {\n          childIndex += 1\n        }\n\n        if (mapResult.matches.length > 0 || mapResult.hasFocusMatch) {\n          matches = [...matches, ...mapResult.matches]\n          if (mapResult.hasFocusMatch) {\n            hasFocusMatch = true\n          }\n\n          // Expand the current node if it has descendants matching the search\n          // and the settings are set to do so.\n          if (\n            (expandAllMatchPaths && mapResult.matches.length > 0) ||\n            ((expandAllMatchPaths || expandFocusMatchPaths) &&\n              mapResult.hasFocusMatch)\n          ) {\n            newNode.expanded = true\n          }\n        }\n\n        return mapResult.node\n      })\n    }\n\n    // Cannot assign a treeIndex to hidden nodes\n    if (!isPseudoRoot && !newNode.expanded) {\n      matches = matches.map((match) => ({\n        ...match,\n        treeIndex: undefined,\n      }))\n    }\n\n    // Add this node to the matches if it fits the search criteria.\n    // This is performed at the last minute so newNode can be sent in its final form.\n    if (isSelfMatch) {\n      matches = [{ ...extraInfo, node: newNode }, ...matches]\n    }\n\n    return {\n      node: matches.length > 0 ? newNode : node,\n      matches,\n      hasFocusMatch,\n      treeIndex: childIndex,\n    }\n  }\n\n  const result = trav({\n    node: { children: treeData },\n    isPseudoRoot: true,\n    currentIndex: -1,\n  })\n\n  return {\n    matches: result.matches,\n    treeData: result.node.children,\n  }\n}\n","// very simple className utility for creating a classname string...\n// Falsy arguments are ignored:\n//\n// const active = true\n// const className = classnames(\n//    \"class1\",\n//    !active && \"class2\",\n//    active && \"class3\"\n// ); // returns -> class1 class3\";\n//\n// Use Boolean constructor as a filter callback\n// Allows for loose type truthy/falsey checks\n// Boolean(\"\") === false;\n// Boolean(false) === false;\n// Boolean(undefined) === false;\n// Boolean(null) === false;\n// Boolean(0) === false;\n// Boolean(\"classname\") === true;\nexport const classnames = (...classes: string[]) =>\n  classes.filter(Boolean).join(' ')\n","import React from 'react'\nimport { ConnectDragPreview, ConnectDragSource } from 'react-dnd'\nimport { classnames } from './utils/classnames'\nimport { isDescendant } from './utils/tree-data-utils'\nimport './node-renderer-default.css'\nimport { NodeData, TreeItem } from '.'\n\nconst defaultProps = {\n  isSearchMatch: false,\n  isSearchFocus: false,\n  canDrag: false,\n  toggleChildrenVisibility: undefined,\n  buttons: [],\n  className: '',\n  style: {},\n  parentNode: undefined,\n  draggedNode: undefined,\n  canDrop: false,\n  title: undefined,\n  subtitle: undefined,\n  rowDirection: 'ltr',\n}\n\nexport interface NodeRendererProps {\n  node: TreeItem\n  path: number[]\n  treeIndex: number\n  isSearchMatch: boolean\n  isSearchFocus: boolean\n  canDrag: boolean\n  scaffoldBlockPxWidth: number\n  toggleChildrenVisibility?(data: NodeData): void | undefined\n  buttons?: JSX.Element[] | undefined\n  className?: string | undefined\n  style?: React.CSSProperties | undefined\n  title?: ((data: NodeData) => JSX.Element | JSX.Element) | undefined\n  subtitle?: ((data: NodeData) => JSX.Element | JSX.Element) | undefined\n  icons?: JSX.Element[] | undefined\n  lowerSiblingCounts: number[]\n  swapDepth?: number | undefined\n  swapFrom?: number | undefined\n  swapLength?: number | undefined\n  listIndex: number\n  treeId: string\n  rowDirection?: 'ltr' | 'rtl' | string | undefined\n\n  connectDragPreview: ConnectDragPreview\n  connectDragSource: ConnectDragSource\n  parentNode?: TreeItem | undefined\n  startDrag: ({ path }: { path: number[] }) => void\n  endDrag: (dropResult: unknown) => void\n  isDragging: boolean\n  didDrop: boolean\n  draggedNode?: TreeItem | undefined\n  isOver: boolean\n  canDrop?: boolean | undefined\n}\n\nconst NodeRendererDefault: React.FC<NodeRendererProps> = (props) => {\n  props = { ...defaultProps, ...props }\n\n  const {\n    scaffoldBlockPxWidth,\n    toggleChildrenVisibility,\n    connectDragPreview,\n    connectDragSource,\n    isDragging,\n    canDrop,\n    canDrag,\n    node,\n    title,\n    subtitle,\n    draggedNode,\n    path,\n    treeIndex,\n    isSearchMatch,\n    isSearchFocus,\n    buttons,\n    className,\n    style,\n    didDrop,\n    treeId: _treeId,\n    isOver: _isOver, // Not needed, but preserved for other renderers\n    parentNode: _parentNode, // Needed for dndManager\n    rowDirection,\n    ...otherProps\n  } = props\n  const nodeTitle = title || node.title\n  const nodeSubtitle = subtitle || node.subtitle\n  const rowDirectionClass = rowDirection === 'rtl' ? 'rst__rtl' : undefined\n\n  let handle\n  if (canDrag) {\n    handle =\n      typeof node.children === 'function' && node.expanded ? (\n        <div className=\"rst__loadingHandle\">\n          <div className=\"rst__loadingCircle\">\n            {Array.from({ length: 12 }).map((_, index) => (\n              <div\n                key={index}\n                className={classnames(\n                  'rst__loadingCirclePoint',\n                  rowDirectionClass ?? ''\n                )}\n              />\n            ))}\n          </div>\n        </div>\n      ) : (\n        connectDragSource(<div className=\"rst__moveHandle\" />, {\n          dropEffect: 'copy',\n        })\n      )\n  }\n\n  const isDraggedDescendant = draggedNode && isDescendant(draggedNode, node)\n  const isLandingPadActive = !didDrop && isDragging\n\n  let buttonStyle = { left: -0.5 * scaffoldBlockPxWidth, right: 0 }\n  if (rowDirection === 'rtl') {\n    buttonStyle = { right: -0.5 * scaffoldBlockPxWidth, left: 0 }\n  }\n\n  return (\n    <div style={{ height: '100%' }} {...otherProps}>\n      {toggleChildrenVisibility &&\n        node.children &&\n        (node.children.length > 0 || typeof node.children === 'function') && (\n          <div>\n            <button\n              type=\"button\"\n              aria-label={node.expanded ? 'Collapse' : 'Expand'}\n              className={classnames(\n                node.expanded ? 'rst__collapseButton' : 'rst__expandButton',\n                rowDirectionClass ?? ''\n              )}\n              style={buttonStyle}\n              onClick={() =>\n                toggleChildrenVisibility({\n                  node,\n                  path,\n                  treeIndex,\n                })\n              }\n            />\n\n            {node.expanded && !isDragging && (\n              <div\n                style={{ width: scaffoldBlockPxWidth }}\n                className={classnames(\n                  'rst__lineChildren',\n                  rowDirectionClass ?? ''\n                )}\n              />\n            )}\n          </div>\n        )}\n\n      <div className={classnames('rst__rowWrapper', rowDirectionClass ?? '')}>\n        {/* Set the row preview to be used during drag and drop */}\n        {connectDragPreview(\n          <div\n            className={classnames(\n              'rst__row',\n              isLandingPadActive ? 'rst__rowLandingPad' : '',\n              isLandingPadActive && !canDrop ? 'rst__rowCancelPad' : '',\n              isSearchMatch ? 'rst__rowSearchMatch' : '',\n              isSearchFocus ? 'rst__rowSearchFocus' : '',\n              rowDirectionClass ?? '',\n              className ?? ''\n            )}\n            style={{\n              opacity: isDraggedDescendant ? 0.5 : 1,\n              ...style,\n            }}>\n            {handle}\n\n            <div\n              className={classnames(\n                'rst__rowContents',\n                canDrag ? '' : 'rst__rowContentsDragDisabled',\n                rowDirectionClass ?? ''\n              )}>\n              <div\n                className={classnames(\n                  'rst__rowLabel',\n                  rowDirectionClass ?? ''\n                )}>\n                <span\n                  className={classnames(\n                    'rst__rowTitle',\n                    node.subtitle ? 'rst__rowTitleWithSubtitle' : ''\n                  )}>\n                  {typeof nodeTitle === 'function'\n                    ? nodeTitle({\n                        node,\n                        path,\n                        treeIndex,\n                      })\n                    : nodeTitle}\n                </span>\n\n                {nodeSubtitle && (\n                  <span className=\"rst__rowSubtitle\">\n                    {typeof nodeSubtitle === 'function'\n                      ? nodeSubtitle({\n                          node,\n                          path,\n                          treeIndex,\n                        })\n                      : nodeSubtitle}\n                  </span>\n                )}\n              </div>\n\n              <div className=\"rst__rowToolbar\">\n                {buttons?.map((btn, index) => (\n                  <div key={index} className=\"rst__toolbarButton\">\n                    {btn}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default NodeRendererDefault\n","import React from 'react'\nimport { classnames } from './utils/classnames'\nimport './placeholder-renderer-default.css'\nimport { TreeItem } from '.'\n\nexport interface PlaceholderRendererProps {\n  isOver: boolean\n  canDrop: boolean\n  draggedNode: TreeItem\n}\n\nconst defaultProps = {\n  isOver: false,\n  canDrop: false,\n}\n\nconst PlaceholderRendererDefault: React.FC<PlaceholderRendererProps> = (\n  props\n) => {\n  props = { ...defaultProps, ...props }\n  const { canDrop, isOver } = props\n\n  return (\n    <div\n      className={classnames(\n        'rst__placeholder',\n        canDrop ? 'rst__placeholderLandingPad' : '',\n        canDrop && !isOver ? 'rst__placeholderCancelPad' : ''\n      )}\n    />\n  )\n}\n\nexport default PlaceholderRendererDefault\n","import React, { Children, Component, cloneElement } from 'react'\nimport { ConnectDropTarget } from 'react-dnd'\nimport { classnames } from './utils/classnames'\nimport './tree-node.css'\nimport { TreeItem, TreePath } from '.'\n\nexport interface TreeNode {\n  node: TreeItem\n}\n\nexport interface FlatDataItem extends TreeNode, TreePath {\n  lowerSiblingCounts: number[]\n  parentNode: TreeItem\n}\n\nexport interface TreeRendererProps {\n  treeIndex: number\n  treeId: string\n  swapFrom?: number | undefined\n  swapDepth?: number | undefined\n  swapLength?: number | undefined\n  scaffoldBlockPxWidth: number\n  lowerSiblingCounts: number[]\n  rowDirection?: 'ltr' | 'rtl' | string | undefined\n  rowHeight: number | ((treeIndex: number, node: any, path: any[]) => number)\n\n  listIndex: number\n  children: JSX.Element[]\n  style?: React.CSSProperties | undefined\n\n  // Drop target\n  connectDropTarget: ConnectDropTarget\n  isOver: boolean\n  canDrop?: boolean | undefined\n  draggedNode?: TreeItem | undefined\n\n  // used in dndManager\n  getPrevRow: () => FlatDataItem | undefined\n  node: TreeItem\n  path: number[]\n}\n\nconst defaultProps = {\n  swapFrom: undefined,\n  swapDepth: undefined,\n  swapLength: undefined,\n  canDrop: false,\n  draggedNode: undefined,\n  rowDirection: 'ltr',\n}\n\nclass TreeNodeComponent extends Component<TreeRendererProps> {\n  render() {\n    const props = { ...defaultProps, ...this.props }\n    const {\n      children,\n      listIndex,\n      swapFrom,\n      swapLength,\n      swapDepth,\n      scaffoldBlockPxWidth,\n      lowerSiblingCounts,\n      connectDropTarget,\n      isOver,\n      draggedNode,\n      canDrop,\n      treeIndex,\n      rowHeight,\n      treeId: _treeId, // Delete from otherProps\n      getPrevRow: _getPrevRow, // Delete from otherProps\n      node: _node, // Delete from otherProps\n      path: _path, // Delete from otherProps\n      rowDirection,\n      ...otherProps\n    } = props\n\n    const rowDirectionClass = rowDirection === 'rtl' ? 'rst__rtl' : undefined\n\n    // Construct the scaffold representing the structure of the tree\n    const scaffoldBlockCount = lowerSiblingCounts.length\n    const scaffold: any[] = []\n    for (const [i, lowerSiblingCount] of lowerSiblingCounts.entries()) {\n      let lineClass = ''\n      if (lowerSiblingCount > 0) {\n        // At this level in the tree, the nodes had sibling nodes further down\n\n        if (listIndex === 0) {\n          // Top-left corner of the tree\n          // +-----+\n          // |     |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass = 'rst__lineHalfHorizontalRight rst__lineHalfVerticalBottom'\n        } else if (i === scaffoldBlockCount - 1) {\n          // Last scaffold block in the row, right before the row content\n          // +--+--+\n          // |  |  |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass = 'rst__lineHalfHorizontalRight rst__lineFullVertical'\n        } else {\n          // Simply connecting the line extending down to the next sibling on this level\n          // +--+--+\n          // |  |  |\n          // |  |  |\n          // |  |  |\n          // +--+--+\n          lineClass = 'rst__lineFullVertical'\n        }\n      } else if (listIndex === 0) {\n        // Top-left corner of the tree, but has no siblings\n        // +-----+\n        // |     |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = 'rst__lineHalfHorizontalRight'\n      } else if (i === scaffoldBlockCount - 1) {\n        // The last or only node in this level of the tree\n        // +--+--+\n        // |  |  |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = 'rst__lineHalfVerticalTop rst__lineHalfHorizontalRight'\n      }\n\n      scaffold.push(\n        <div\n          key={`pre_${1 + i}`}\n          style={{ width: scaffoldBlockPxWidth }}\n          className={classnames(\n            'rst__lineBlock',\n            lineClass,\n            rowDirectionClass ?? ''\n          )}\n        />\n      )\n\n      if (treeIndex !== listIndex && i === swapDepth) {\n        // This row has been shifted, and is at the depth of\n        // the line pointing to the new destination\n        let highlightLineClass = ''\n\n        if (listIndex === swapFrom! + swapLength! - 1) {\n          // This block is on the bottom (target) line\n          // This block points at the target block (where the row will go when released)\n          highlightLineClass = 'rst__highlightBottomLeftCorner'\n        } else if (treeIndex === swapFrom) {\n          // This block is on the top (source) line\n          highlightLineClass = 'rst__highlightTopLeftCorner'\n        } else {\n          // This block is between the bottom and top\n          highlightLineClass = 'rst__highlightLineVertical'\n        }\n\n        const style =\n          rowDirection === 'rtl'\n            ? {\n                width: scaffoldBlockPxWidth,\n                right: scaffoldBlockPxWidth * i,\n              }\n            : {\n                width: scaffoldBlockPxWidth,\n                left: scaffoldBlockPxWidth * i,\n              }\n\n        scaffold.push(\n          <div\n            key={i}\n            style={style}\n            className={classnames(\n              'rst__absoluteLineBlock',\n              highlightLineClass,\n              rowDirectionClass ?? ''\n            )}\n          />\n        )\n      }\n    }\n\n    const style =\n      rowDirection === 'rtl'\n        ? { right: scaffoldBlockPxWidth * scaffoldBlockCount }\n        : { left: scaffoldBlockPxWidth * scaffoldBlockCount }\n\n    let calculatedRowHeight = rowHeight\n    if (typeof rowHeight === 'function') {\n      calculatedRowHeight = rowHeight(treeIndex, _node, _path)\n    }\n    return connectDropTarget(\n      <div\n        {...otherProps}\n        style={{ height: `${calculatedRowHeight}px` }}\n        className={classnames('rst__node', rowDirectionClass ?? '')}\n        ref={(node) => (this.node = node)}>\n        {scaffold}\n\n        <div className=\"rst__nodeContent\" style={style}>\n          {Children.map(children, (child: any) =>\n            cloneElement(child, {\n              isOver,\n              canDrop,\n              draggedNode,\n            })\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TreeNodeComponent\n","import React, { Children, cloneElement } from 'react'\nimport { ConnectDropTarget } from 'react-dnd'\nimport { TreeItem } from '.'\n\nconst defaultProps = {\n  canDrop: false,\n  draggedNode: undefined,\n}\n\ntype TreePlaceholderProps = {\n  children: any\n  // Drop target\n  connectDropTarget: ConnectDropTarget\n  isOver: boolean\n  canDrop: boolean\n  draggedNode: TreeItem\n  treeId: string\n  drop: any\n}\n\nconst TreePlaceholder = (props: TreePlaceholderProps) => {\n  props = { ...defaultProps, ...props }\n  const { children, connectDropTarget, treeId, drop, ...otherProps } = props\n\n  return connectDropTarget(\n    <div>\n      {Children.map(children, (child) =>\n        cloneElement(child, {\n          ...otherProps,\n        })\n      )}\n    </div>\n  )\n}\n\nexport default TreePlaceholder\n","// @ts-nocheck\n\nimport { DragSource as dragSource, DropTarget as dropTarget } from 'react-dnd'\nimport { getDepth } from './tree-data-utils'\n\nlet rafId = 0\n\nconst nodeDragSourcePropInjection = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n  isDragging: monitor.isDragging(),\n  didDrop: monitor.didDrop(),\n})\n\nexport const wrapSource = (el, startDrag, endDrag, dndType) => {\n  const nodeDragSource = {\n    beginDrag: (props) => {\n      startDrag(props)\n\n      return {\n        node: props.node,\n        parentNode: props.parentNode,\n        path: props.path,\n        treeIndex: props.treeIndex,\n        treeId: props.treeId,\n      }\n    },\n\n    endDrag: (props, monitor) => {\n      endDrag(monitor.getDropResult())\n    },\n\n    isDragging: (props, monitor) => {\n      const dropTargetNode = monitor.getItem().node\n      const draggedNode = props.node\n\n      return draggedNode === dropTargetNode\n    },\n  }\n\n  return dragSource(dndType, nodeDragSource, nodeDragSourcePropInjection)(el)\n}\n\nconst propInjection = (connect, monitor) => {\n  const dragged = monitor.getItem()\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    draggedNode: dragged ? dragged.node : undefined,\n  }\n}\n\nexport const wrapPlaceholder = (el, treeId, drop, dndType) => {\n  const placeholderDropTarget = {\n    drop: (dropTargetProps, monitor) => {\n      const { node, path, treeIndex } = monitor.getItem()\n      const result = {\n        node,\n        path,\n        treeIndex,\n        treeId,\n        minimumTreeIndex: 0,\n        depth: 0,\n      }\n\n      drop(result)\n\n      return result\n    },\n  }\n\n  return dropTarget(dndType, placeholderDropTarget, propInjection)(el)\n}\n\nconst getTargetDepth = (\n  dropTargetProps,\n  monitor,\n  component,\n  canNodeHaveChildren,\n  treeId,\n  maxDepth\n) => {\n  let dropTargetDepth = 0\n\n  const rowAbove = dropTargetProps.getPrevRow()\n  if (rowAbove) {\n    const { node } = rowAbove\n    let { path } = rowAbove\n    const aboveNodeCannotHaveChildren = !canNodeHaveChildren(node)\n    if (aboveNodeCannotHaveChildren) {\n      path = path.slice(0, -1)\n    }\n\n    // Limit the length of the path to the deepest possible\n    dropTargetDepth = Math.min(path.length, dropTargetProps.path.length)\n  }\n\n  let blocksOffset\n  let dragSourceInitialDepth = (monitor.getItem().path || []).length\n\n  // When adding node from external source\n  if (monitor.getItem().treeId === treeId) {\n    // handle row direction support\n    const direction = dropTargetProps.rowDirection === 'rtl' ? -1 : 1\n\n    blocksOffset = Math.round(\n      (direction * monitor.getDifferenceFromInitialOffset().x) /\n        dropTargetProps.scaffoldBlockPxWidth\n    )\n  } else {\n    // Ignore the tree depth of the source, if it had any to begin with\n    dragSourceInitialDepth = 0\n\n    if (component) {\n      const relativePosition = component.node.getBoundingClientRect()\n      const leftShift =\n        monitor.getSourceClientOffset().x - relativePosition.left\n      blocksOffset = Math.round(\n        leftShift / dropTargetProps.scaffoldBlockPxWidth\n      )\n    } else {\n      blocksOffset = dropTargetProps.path.length\n    }\n  }\n\n  let targetDepth = Math.min(\n    dropTargetDepth,\n    Math.max(0, dragSourceInitialDepth + blocksOffset - 1)\n  )\n\n  // If a maxDepth is defined, constrain the target depth\n  if (maxDepth !== undefined) {\n    const draggedNode = monitor.getItem().node\n    const draggedChildDepth = getDepth(draggedNode)\n\n    targetDepth = Math.max(\n      0,\n      Math.min(targetDepth, maxDepth - draggedChildDepth - 1)\n    )\n  }\n\n  return targetDepth\n}\n\nconst canDrop = (\n  dropTargetProps,\n  monitor,\n  canNodeHaveChildren,\n  treeId,\n  maxDepth,\n  treeRefcanDrop\n) => {\n  if (!monitor.isOver()) {\n    return false\n  }\n\n  const rowAbove = dropTargetProps.getPrevRow()\n  const abovePath = rowAbove ? rowAbove.path : []\n  const aboveNode = rowAbove ? rowAbove.node : {}\n  const targetDepth = getTargetDepth(\n    dropTargetProps,\n    monitor,\n    undefined,\n    canNodeHaveChildren,\n    treeId,\n    maxDepth\n  )\n\n  // Cannot drop if we're adding to the children of the row above and\n  //  the row above is a function\n  if (\n    targetDepth >= abovePath.length &&\n    typeof aboveNode.children === 'function'\n  ) {\n    return false\n  }\n\n  if (typeof treeRefcanDrop === 'function') {\n    const { node } = monitor.getItem()\n\n    return treeRefcanDrop({\n      node,\n      prevPath: monitor.getItem().path,\n      prevParent: monitor.getItem().parentNode,\n      prevTreeIndex: monitor.getItem().treeIndex, // Equals -1 when dragged from external tree\n      nextPath: dropTargetProps.children.props.path,\n      nextParent: dropTargetProps.children.props.parentNode,\n      nextTreeIndex: dropTargetProps.children.props.treeIndex,\n    })\n  }\n\n  return true\n}\n\nexport const wrapTarget = (\n  el,\n  canNodeHaveChildren,\n  treeId,\n  maxDepth,\n  treeRefcanDrop,\n  drop,\n  dragHover,\n  dndType\n) => {\n  const nodeDropTarget = {\n    drop: (dropTargetProps, monitor, component) => {\n      const result = {\n        node: monitor.getItem().node,\n        path: monitor.getItem().path,\n        treeIndex: monitor.getItem().treeIndex,\n        treeId,\n        minimumTreeIndex: dropTargetProps.treeIndex,\n        depth: getTargetDepth(\n          dropTargetProps,\n          monitor,\n          component,\n          canNodeHaveChildren,\n          treeId,\n          maxDepth\n        ),\n      }\n\n      drop(result)\n\n      return result\n    },\n\n    hover: (dropTargetProps, monitor, component) => {\n      const targetDepth = getTargetDepth(\n        dropTargetProps,\n        monitor,\n        component,\n        canNodeHaveChildren,\n        treeId,\n        maxDepth\n      )\n      const draggedNode = monitor.getItem().node\n      const needsRedraw =\n        // Redraw if hovered above different nodes\n        dropTargetProps.node !== draggedNode ||\n        // Or hovered above the same node but at a different depth\n        targetDepth !== dropTargetProps.path.length - 1\n\n      if (!needsRedraw) {\n        return\n      }\n\n      // throttle `dragHover` work to available animation frames\n      cancelAnimationFrame(rafId)\n      rafId = requestAnimationFrame(() => {\n        const item = monitor.getItem()\n        // skip if drag already ended before the animation frame\n        if (!item || !monitor.isOver()) {\n          return\n        }\n        dragHover({\n          node: draggedNode,\n          path: item.path,\n          minimumTreeIndex: dropTargetProps.listIndex,\n          depth: targetDepth,\n        })\n      })\n    },\n\n    canDrop: (dropTargetProps, monitor) =>\n      canDrop(\n        dropTargetProps,\n        monitor,\n        canNodeHaveChildren,\n        treeId,\n        maxDepth,\n        treeRefcanDrop\n      ),\n  }\n\n  return dropTarget(dndType, nodeDropTarget, propInjection)(el)\n}\n","export const slideRows = (\n  rows: any[],\n  fromIndex: number,\n  toIndex: number,\n  count = 1\n) => {\n  const rowsWithoutMoved = [\n    ...rows.slice(0, fromIndex),\n    ...rows.slice(fromIndex + count),\n  ]\n\n  return [\n    ...rowsWithoutMoved.slice(0, toIndex),\n    ...rows.slice(fromIndex, fromIndex + count),\n    ...rowsWithoutMoved.slice(toIndex),\n  ]\n}\n","import {\n  getDescendantCount,\n  getFlatDataFromTree,\n  insertNode,\n} from './tree-data-utils'\n\nconst memoize = (f: (...args: any) => void) => {\n  let savedArgsArray: any = []\n  let savedKeysArray: any = []\n  let savedResult: any\n\n  return (args: any) => {\n    const keysArray = Object.keys(args).sort()\n    const argsArray = keysArray.map((key) => args[key])\n\n    // If the arguments for the last insert operation are different than this time,\n    // recalculate the result\n    if (\n      argsArray.length !== savedArgsArray.length ||\n      argsArray.some((arg, index) => arg !== savedArgsArray[index]) ||\n      keysArray.some((key, index) => key !== savedKeysArray[index])\n    ) {\n      savedArgsArray = argsArray\n      savedKeysArray = keysArray\n      savedResult = f(args)\n    }\n\n    return savedResult\n  }\n}\n\nexport const memoizedInsertNode = memoize(insertNode)\nexport const memoizedGetFlatDataFromTree = memoize(getFlatDataFromTree)\nexport const memoizedGetDescendantCount = memoize(getDescendantCount)\n","// @ts-nocheck\n\nimport React, { Component } from 'react'\nimport isEqual from 'lodash.isequal'\nimport { DndContext, DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { VList, VListHandle } from 'virtua'\nimport NodeRendererDefault from './node-renderer-default'\nimport PlaceholderRendererDefault from './placeholder-renderer-default'\nimport TreeNode from './tree-node'\nimport TreePlaceholder from './tree-placeholder'\nimport { classnames } from './utils/classnames'\nimport {\n  defaultGetNodeKey,\n  defaultSearchMethod,\n} from './utils/default-handlers'\nimport { wrapPlaceholder, wrapSource, wrapTarget } from './utils/dnd-manager'\nimport { slideRows } from './utils/generic-utils'\nimport {\n  memoizedGetDescendantCount,\n  memoizedGetFlatDataFromTree,\n  memoizedInsertNode,\n} from './utils/memoized-tree-data-utils'\nimport {\n  changeNodeAtPath,\n  find,\n  insertNode,\n  removeNode,\n  toggleExpandedForAll,\n  walk,\n} from './utils/tree-data-utils'\n\nlet treeIdCounter = 1\n\nconst mergeTheme = (props) => {\n  const merged = {\n    ...props,\n    style: { ...props.theme.style, ...props.style },\n    innerStyle: { ...props.theme.innerStyle, ...props.innerStyle },\n  }\n\n  const overridableDefaults = {\n    nodeContentRenderer: NodeRendererDefault,\n    placeholderRenderer: PlaceholderRendererDefault,\n    scaffoldBlockPxWidth: 44,\n    slideRegionSize: 100,\n    rowHeight: 62,\n    treeNodeRenderer: TreeNode,\n  }\n  for (const propKey of Object.keys(overridableDefaults)) {\n    // If prop has been specified, do not change it\n    // If prop is specified in theme, use the theme setting\n    // If all else fails, fall back to the default\n    if (props[propKey] === undefined) {\n      merged[propKey] =\n        props.theme[propKey] === undefined\n          ? overridableDefaults[propKey]\n          : props.theme[propKey]\n    }\n  }\n\n  return merged\n}\n\nclass ReactSortableTree extends Component {\n  // returns the new state after search\n  static search(props, state, seekIndex, expand, singleSearch) {\n    const {\n      onChange,\n      getNodeKey,\n      searchFinishCallback,\n      searchQuery,\n      searchMethod,\n      searchFocusOffset,\n      onlyExpandSearchedNodes,\n    } = props\n\n    const { instanceProps } = state\n\n    // Skip search if no conditions are specified\n    if (!searchQuery && !searchMethod) {\n      if (searchFinishCallback) {\n        searchFinishCallback([])\n      }\n\n      return { searchMatches: [] }\n    }\n\n    const newState = { instanceProps: {} }\n\n    // if onlyExpandSearchedNodes collapse the tree and search\n    const { treeData: expandedTreeData, matches: searchMatches } = find({\n      getNodeKey,\n      treeData: onlyExpandSearchedNodes\n        ? toggleExpandedForAll({\n            treeData: instanceProps.treeData,\n            expanded: false,\n          })\n        : instanceProps.treeData,\n      searchQuery,\n      searchMethod: searchMethod || defaultSearchMethod,\n      searchFocusOffset,\n      expandAllMatchPaths: expand && !singleSearch,\n      expandFocusMatchPaths: !!expand,\n    })\n\n    // Update the tree with data leaving all paths leading to matching nodes open\n    if (expand) {\n      newState.instanceProps.ignoreOneTreeUpdate = true // Prevents infinite loop\n      onChange(expandedTreeData, { changeActionType: 'search' })\n    }\n\n    if (searchFinishCallback) {\n      searchFinishCallback(searchMatches)\n    }\n\n    let searchFocusTreeIndex\n    if (\n      seekIndex &&\n      searchFocusOffset !== undefined &&\n      searchFocusOffset < searchMatches.length\n    ) {\n      searchFocusTreeIndex = searchMatches[searchFocusOffset].treeIndex\n    }\n\n    newState.searchMatches = searchMatches\n    newState.searchFocusTreeIndex = searchFocusTreeIndex\n\n    return newState\n  }\n\n  // Load any children in the tree that are given by a function\n  // calls the onChange callback on the new treeData\n  static loadLazyChildren(props, state) {\n    const { instanceProps } = state\n\n    walk({\n      treeData: instanceProps.treeData,\n      getNodeKey: props.getNodeKey,\n      callback: ({ node, path, lowerSiblingCounts, treeIndex }) => {\n        // If the node has children defined by a function, and is either expanded\n        //  or set to load even before expansion, run the function.\n        if (\n          node.children &&\n          typeof node.children === 'function' &&\n          (node.expanded || props.loadCollapsedLazyChildren)\n        ) {\n          // Call the children fetching function\n          node.children({\n            node,\n            path,\n            lowerSiblingCounts,\n            treeIndex,\n\n            // Provide a helper to append the new data when it is received\n            done: (childrenArray) =>\n              props.onChange(\n                changeNodeAtPath({\n                  treeData: instanceProps.treeData,\n                  path,\n                  newNode: ({ node: oldNode }) =>\n                    // Only replace the old node if it's the one we set off to find children\n                    //  for in the first place\n                    oldNode === node\n                      ? {\n                          ...oldNode,\n                          children: childrenArray,\n                        }\n                      : oldNode,\n                  getNodeKey: props.getNodeKey,\n                }),\n                { changeActionType: 'lazy-loaded' }\n              ),\n          })\n        }\n      },\n    })\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.listRef = props.virtuaRef || React.createRef<VListHandle>()\n\n    const { dndType, nodeContentRenderer, treeNodeRenderer, slideRegionSize } =\n      mergeTheme(props)\n\n    // Wrapping classes for use with react-dnd\n    this.treeId = `rst__${treeIdCounter}`\n    treeIdCounter += 1\n    this.dndType = dndType || this.treeId\n    this.nodeContentRenderer = wrapSource(\n      nodeContentRenderer,\n      this.startDrag,\n      this.endDrag,\n      this.dndType\n    )\n    this.treePlaceholderRenderer = wrapPlaceholder(\n      TreePlaceholder,\n      this.treeId,\n      this.drop,\n      this.dndType\n    )\n\n    this.state = {\n      draggingTreeData: undefined,\n      draggedNode: undefined,\n      draggedMinimumTreeIndex: undefined,\n      draggedDepth: undefined,\n      searchMatches: [],\n      searchFocusTreeIndex: undefined,\n      dragging: false,\n\n      // props that need to be used in gDSFP or static functions will be stored here\n      instanceProps: {\n        treeData: [],\n        ignoreOneTreeUpdate: false,\n        searchQuery: undefined,\n        searchFocusOffset: undefined,\n      },\n    }\n\n    this.treeNodeRenderer = wrapTarget(\n      treeNodeRenderer,\n      this.canNodeHaveChildren,\n      this.treeId,\n      this.props.maxDepth,\n      this.props.canDrop,\n      this.drop,\n      this.dragHover,\n      this.dndType\n    )\n\n    this.toggleChildrenVisibility = this.toggleChildrenVisibility.bind(this)\n    this.moveNode = this.moveNode.bind(this)\n    this.startDrag = this.startDrag.bind(this)\n    this.dragHover = this.dragHover.bind(this)\n    this.endDrag = this.endDrag.bind(this)\n    this.drop = this.drop.bind(this)\n    this.handleDndMonitorChange = this.handleDndMonitorChange.bind(this)\n  }\n\n  componentDidMount() {\n    ReactSortableTree.loadLazyChildren(this.props, this.state)\n    const stateUpdate = ReactSortableTree.search(\n      this.props,\n      this.state,\n      true,\n      true,\n      false\n    )\n    this.setState(stateUpdate)\n\n    // Hook into react-dnd state changes to detect when the drag ends\n    // TODO: This is very brittle, so it needs to be replaced if react-dnd\n    // offers a more official way to detect when a drag ends\n    this.clearMonitorSubscription = this.props.dragDropManager\n      .getMonitor()\n      .subscribeToStateChange(this.handleDndMonitorChange)\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { instanceProps } = prevState\n    const newState = {}\n    const newInstanceProps = { ...instanceProps }\n\n    const isTreeDataEqual = isEqual(instanceProps.treeData, nextProps.treeData)\n\n    // make sure we have the most recent version of treeData\n    newInstanceProps.treeData = nextProps.treeData\n\n    if (!isTreeDataEqual) {\n      if (instanceProps.ignoreOneTreeUpdate) {\n        newInstanceProps.ignoreOneTreeUpdate = false\n      } else {\n        newState.searchFocusTreeIndex = undefined\n        ReactSortableTree.loadLazyChildren(nextProps, prevState)\n        Object.assign(\n          newState,\n          ReactSortableTree.search(nextProps, prevState, false, false, false)\n        )\n      }\n\n      newState.draggingTreeData = undefined\n      newState.draggedNode = undefined\n      newState.draggedMinimumTreeIndex = undefined\n      newState.draggedDepth = undefined\n      newState.dragging = false\n    } else if (!isEqual(instanceProps.searchQuery, nextProps.searchQuery)) {\n      Object.assign(\n        newState,\n        ReactSortableTree.search(nextProps, prevState, true, true, false)\n      )\n    } else if (\n      instanceProps.searchFocusOffset !== nextProps.searchFocusOffset\n    ) {\n      Object.assign(\n        newState,\n        ReactSortableTree.search(nextProps, prevState, true, true, true)\n      )\n    }\n\n    newInstanceProps.searchQuery = nextProps.searchQuery\n    newInstanceProps.searchFocusOffset = nextProps.searchFocusOffset\n    newState.instanceProps = { ...newInstanceProps, ...newState.instanceProps }\n\n    return newState\n  }\n\n  // listen to dragging\n  componentDidUpdate(prevProps, prevState) {\n    // if it is not the same then call the onDragStateChanged\n    if (\n      this.state.dragging !== prevState.dragging &&\n      this.props.onDragStateChanged\n    ) {\n      this.props.onDragStateChanged({\n        isDragging: this.state.dragging,\n        draggedNode: this.state.draggedNode,\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearMonitorSubscription()\n  }\n\n  handleDndMonitorChange() {\n    const monitor = this.props.dragDropManager.getMonitor()\n    // If the drag ends and the tree is still in a mid-drag state,\n    // it means that the drag was canceled or the dragSource dropped\n    // elsewhere, and we should reset the state of this tree\n    if (!monitor.isDragging() && this.state.draggingTreeData) {\n      setTimeout(() => {\n        this.endDrag()\n      })\n    }\n  }\n\n  getRows(treeData) {\n    return memoizedGetFlatDataFromTree({\n      ignoreCollapsed: true,\n      getNodeKey: this.props.getNodeKey,\n      treeData,\n    })\n  }\n\n  startDrag = ({ path }) => {\n    this.setState((prevState) => {\n      const {\n        treeData: draggingTreeData,\n        node: draggedNode,\n        treeIndex: draggedMinimumTreeIndex,\n      } = removeNode({\n        treeData: prevState.instanceProps.treeData,\n        path,\n        getNodeKey: this.props.getNodeKey,\n      })\n\n      return {\n        draggingTreeData,\n        draggedNode,\n        draggedDepth: path.length - 1,\n        draggedMinimumTreeIndex,\n        dragging: true,\n      }\n    })\n  }\n\n  dragHover = ({\n    node: draggedNode,\n    depth: draggedDepth,\n    minimumTreeIndex: draggedMinimumTreeIndex,\n  }) => {\n    // Ignore this hover if it is at the same position as the last hover\n    if (\n      this.state.draggedDepth === draggedDepth &&\n      this.state.draggedMinimumTreeIndex === draggedMinimumTreeIndex\n    ) {\n      return\n    }\n\n    this.setState(({ draggingTreeData, instanceProps }) => {\n      // Fall back to the tree data if something is being dragged in from\n      //  an external element\n      const newDraggingTreeData = draggingTreeData || instanceProps.treeData\n\n      const addedResult = memoizedInsertNode({\n        treeData: newDraggingTreeData,\n        newNode: draggedNode,\n        depth: draggedDepth,\n        minimumTreeIndex: draggedMinimumTreeIndex,\n        expandParent: true,\n        getNodeKey: this.props.getNodeKey,\n      })\n\n      const rows = this.getRows(addedResult.treeData)\n      const expandedParentPath = rows[addedResult.treeIndex].path\n\n      return {\n        draggedNode,\n        draggedDepth,\n        draggedMinimumTreeIndex,\n        draggingTreeData: changeNodeAtPath({\n          treeData: newDraggingTreeData,\n          path: expandedParentPath.slice(0, -1),\n          newNode: ({ node }) => ({ ...node, expanded: true }),\n          getNodeKey: this.props.getNodeKey,\n        }),\n        // reset the scroll focus so it doesn't jump back\n        // to a search result while dragging\n        searchFocusTreeIndex: undefined,\n        dragging: true,\n      }\n    })\n  }\n\n  endDrag = (dropResult) => {\n    const { instanceProps } = this.state\n\n    // Drop was cancelled\n    if (!dropResult) {\n      this.setState({\n        draggingTreeData: undefined,\n        draggedNode: undefined,\n        draggedMinimumTreeIndex: undefined,\n        draggedDepth: undefined,\n        dragging: false,\n      })\n    } else if (dropResult.treeId !== this.treeId) {\n      // The node was dropped in an external drop target or tree\n      const { node, path, treeIndex } = dropResult\n      let shouldCopy = this.props.shouldCopyOnOutsideDrop\n      if (typeof shouldCopy === 'function') {\n        shouldCopy = shouldCopy({\n          node,\n          prevTreeIndex: treeIndex,\n          prevPath: path,\n        })\n      }\n\n      let treeData = this.state.draggingTreeData || instanceProps.treeData\n\n      // If copying is enabled, a drop outside leaves behind a copy in the\n      //  source tree\n      if (shouldCopy) {\n        treeData = changeNodeAtPath({\n          treeData: instanceProps.treeData, // use treeData unaltered by the drag operation\n          path,\n          newNode: ({ node: copyNode }) => ({ ...copyNode }), // create a shallow copy of the node\n          getNodeKey: this.props.getNodeKey,\n        })\n      }\n\n      this.props.onChange(treeData, { changeActionType: 'move-external' })\n\n      this.props.onMoveNode({\n        treeData,\n        node,\n        treeIndex: undefined,\n        path: undefined,\n        nextPath: undefined,\n        nextTreeIndex: undefined,\n        prevPath: path,\n        prevTreeIndex: treeIndex,\n      })\n    }\n  }\n\n  drop = (dropResult) => {\n    this.moveNode(dropResult)\n  }\n\n  canNodeHaveChildren = (node) => {\n    const { canNodeHaveChildren } = this.props\n    if (canNodeHaveChildren) {\n      return canNodeHaveChildren(node)\n    }\n    return true\n  }\n\n  toggleChildrenVisibility({ node: targetNode, path }) {\n    const { instanceProps } = this.state\n\n    const treeData = changeNodeAtPath({\n      treeData: instanceProps.treeData,\n      path,\n      newNode: ({ node }) => ({ ...node, expanded: !node.expanded }),\n      getNodeKey: this.props.getNodeKey,\n    })\n\n    this.props.onChange(treeData, { changeActionType: 'expand' })\n\n    this.props.onVisibilityToggle({\n      treeData,\n      node: targetNode,\n      expanded: !targetNode.expanded,\n      path,\n    })\n  }\n\n  moveNode({\n    node,\n    path: prevPath,\n    treeIndex: prevTreeIndex,\n    depth,\n    minimumTreeIndex,\n  }) {\n    const {\n      treeData,\n      treeIndex,\n      path,\n      parentNode: nextParentNode,\n    } = insertNode({\n      treeData: this.state.draggingTreeData,\n      newNode: node,\n      depth,\n      minimumTreeIndex,\n      expandParent: true,\n      getNodeKey: this.props.getNodeKey,\n    })\n\n    this.props.onChange(treeData, { changeActionType: 'move-internal' })\n\n    this.props.onMoveNode({\n      treeData,\n      node,\n      treeIndex,\n      path,\n      nextPath: path,\n      nextTreeIndex: treeIndex,\n      prevPath,\n      prevTreeIndex,\n      nextParentNode,\n    })\n  }\n\n  renderRow(\n    row,\n    { listIndex, style, getPrevRow, matchKeys, swapFrom, swapDepth, swapLength }\n  ) {\n    const { node, parentNode, path, lowerSiblingCounts, treeIndex } = row\n\n    const {\n      canDrag,\n      generateNodeProps,\n      scaffoldBlockPxWidth,\n      searchFocusOffset,\n      rowDirection,\n      rowHeight,\n    } = mergeTheme(this.props)\n    const TreeNodeRenderer = this.treeNodeRenderer\n    const NodeContentRenderer = this.nodeContentRenderer\n    const nodeKey = path.at(-1)\n    const isSearchMatch = nodeKey in matchKeys\n    const isSearchFocus =\n      isSearchMatch && matchKeys[nodeKey] === searchFocusOffset\n    const callbackParams = {\n      node,\n      parentNode,\n      path,\n      lowerSiblingCounts,\n      treeIndex,\n      isSearchMatch,\n      isSearchFocus,\n    }\n    const nodeProps = generateNodeProps ? generateNodeProps(callbackParams) : {}\n    const rowCanDrag =\n      typeof canDrag === 'function' ? canDrag(callbackParams) : canDrag\n\n    const sharedProps = {\n      treeIndex,\n      scaffoldBlockPxWidth,\n      node,\n      path,\n      treeId: this.treeId,\n      rowDirection,\n    }\n\n    return (\n      <TreeNodeRenderer\n        style={style}\n        rowHeight={rowHeight}\n        key={nodeKey}\n        listIndex={listIndex}\n        getPrevRow={getPrevRow}\n        lowerSiblingCounts={lowerSiblingCounts}\n        swapFrom={swapFrom}\n        swapLength={swapLength}\n        swapDepth={swapDepth}\n        {...sharedProps}>\n        <NodeContentRenderer\n          parentNode={parentNode}\n          isSearchMatch={isSearchMatch}\n          isSearchFocus={isSearchFocus}\n          canDrag={rowCanDrag}\n          toggleChildrenVisibility={this.toggleChildrenVisibility}\n          {...sharedProps}\n          {...nodeProps}\n        />\n      </TreeNodeRenderer>\n    )\n  }\n\n  render() {\n    const {\n      dragDropManager,\n      style,\n      className,\n      innerStyle,\n      placeholderRenderer,\n      getNodeKey,\n      rowDirection,\n    } = mergeTheme(this.props)\n\n    const {\n      searchMatches,\n      searchFocusTreeIndex,\n      draggedNode,\n      draggedDepth,\n      draggedMinimumTreeIndex,\n      draggingTreeData,\n      instanceProps,\n    } = this.state\n\n    const treeData = draggingTreeData || instanceProps.treeData\n    const rowDirectionClass = rowDirection === 'rtl' ? 'rst__rtl' : undefined\n\n    let rows\n    let swapFrom\n    let swapLength\n    if (draggedNode && draggedMinimumTreeIndex !== undefined) {\n      const addedResult = memoizedInsertNode({\n        treeData,\n        newNode: draggedNode,\n        depth: draggedDepth,\n        minimumTreeIndex: draggedMinimumTreeIndex,\n        expandParent: true,\n        getNodeKey,\n      })\n\n      const swapTo = draggedMinimumTreeIndex\n      swapFrom = addedResult.treeIndex\n      swapLength = 1 + memoizedGetDescendantCount({ node: draggedNode })\n      rows = slideRows(\n        this.getRows(addedResult.treeData),\n        swapFrom,\n        swapTo,\n        swapLength\n      )\n    } else {\n      rows = this.getRows(treeData)\n    }\n\n    // Get indices for rows that match the search conditions\n    const matchKeys = {}\n    for (const [i, { path }] of searchMatches.entries()) {\n      matchKeys[path.at(-1)] = i\n    }\n\n    // Seek to the focused search result if there is one specified\n    if (searchFocusTreeIndex !== undefined) {\n      this.listRef?.current?.scrollToIndex(searchFocusTreeIndex, {\n        smooth: true,\n        align: 'center',\n      })\n    }\n\n    let containerStyle = style\n    let list\n    if (rows.length === 0) {\n      const Placeholder = this.treePlaceholderRenderer\n      const PlaceholderContent = placeholderRenderer\n      list = (\n        <Placeholder treeId={this.treeId} drop={this.drop}>\n          <PlaceholderContent />\n        </Placeholder>\n      )\n    } else {\n      containerStyle = { height: '100%', ...containerStyle }\n\n      list = (\n        <VList\n          id=\"vlist\"\n          ref={this.listRef}\n          dragDropManager={dragDropManager}\n          style={innerStyle}>\n          {rows.map((item, index) => {\n            return this.renderRow(item, {\n              listIndex: index,\n              getPrevRow: () => rows[index - 1] || undefined,\n              matchKeys,\n              swapFrom,\n              swapDepth: draggedDepth,\n              swapLength,\n            })\n          })}\n        </VList>\n      )\n    }\n\n    return (\n      <div\n        className={classnames('rst__tree', className, rowDirectionClass)}\n        style={containerStyle}>\n        {list}\n      </div>\n    )\n  }\n}\n\ntype SearchParams = {\n  node: any\n  path: number[]\n  treeIndex: number\n  searchQuery: string\n}\n\ntype SearchFinishCallbackParams = {\n  node: any\n  path: number[]\n  treeIndex: number\n}[]\n\ntype GenerateNodePropsParams = {\n  node: any\n  path: number[]\n  treeIndex: number\n  lowerSiblingCounts: number[]\n  isSearchMatch: boolean\n  isSearchFocus: boolean\n}\n\ntype ShouldCopyOnOutsideDropParams = {\n  node: any\n  prevPath: number[]\n  prevTreeIndex: number\n}\n\ntype OnMoveNodeParams = {\n  treeData: any[]\n  node: any\n  nextParentNode: any\n  prevPath: number[]\n  prevTreeIndex: number\n  nextPath: number[]\n  nextTreeIndex: number\n}\n\ntype CanDropParams = {\n  node: any\n  prevPath: number[]\n  prevParent: any\n  prevTreeIndex: number\n  nextPath: number[]\n  nextParent: any\n  nextTreeIndex: number\n}\n\ntype OnVisibilityToggleParams = {\n  treeData: any[]\n  node: any\n  expanded: boolean\n  path: number[]\n}\n\ntype OnDragStateChangedParams = {\n  isDragging: boolean\n  draggedNode: any\n}\n\n// Available actions for the tree\n// move-internal: Move a node within the tree\n// move-external: Move a node from outside the tree\n// expand: Expand a node\n// collapse: Collapse a node\n// search: Search for nodes\n// lazy-loaded: Load lazy-loaded nodes\ntype ChangeAction =\n  | 'move-iternal'\n  | 'move-external'\n  | 'expand'\n  | 'collapse'\n  | 'search'\n  | 'lazy-loaded'\n\nexport type ReactSortableTreeProps = {\n  dragDropManager?: {\n    getMonitor: () => unknown\n  }\n\n  // Tree data in the following format:\n  // [{title: 'main', subtitle: 'sub'}, { title: 'value2', expanded: true, children: [{ title: 'value3') }] }]\n  // `title` is the primary label for the node\n  // `subtitle` is a secondary label for the node\n  // `expanded` shows children of the node if true, or hides them if false. Defaults to false.\n  // `children` is an array of child nodes belonging to the node.\n  treeData: any[]\n\n  // Style applied to the container wrapping the tree (style defaults to {height: '100%'})\n  style?: any\n\n  // Class name for the container wrapping the tree\n  className?: string\n\n  // Ref for virtua component\n  // Use virtuaRef when you want to use virtua handler\n  // (ex. scrollTo scrollToIndex)\n  virtuaRef?: React.Ref<VListHandle>\n\n  // Style applied to the inner, scrollable container (for padding, etc.)\n  innerStyle?: any\n\n  // Size in px of the region near the edges that initiates scrolling on dragover\n  slideRegionSize?: number\n\n  // The width of the blocks containing the lines representing the structure of the tree.\n  scaffoldBlockPxWidth?: number\n\n  // Maximum depth nodes can be inserted at. Defaults to infinite.\n  maxDepth?: number\n\n  // The method used to search nodes.\n  // Defaults to a function that uses the `searchQuery` string to search for nodes with\n  // matching `title` or `subtitle` values.\n  // NOTE: Changing `searchMethod` will not update the search, but changing the `searchQuery` will.\n  searchMethod?: (params: SearchParams) => boolean\n\n  // Used by the `searchMethod` to highlight and scroll to matched nodes.\n  // Should be a string for the default `searchMethod`, but can be anything when using a custom search.\n  searchQuery?: string\n\n  // Outline the <`searchFocusOffset`>th node and scroll to it.\n  searchFocusOffset?: number\n\n  // Get the nodes that match the search criteria. Used for counting total matches, etc.\n  searchFinishCallback?: (params: SearchFinishCallbackParams) => void\n\n  // Generate an object with additional props to be passed to the node renderer.\n  // Use this for adding buttons via the `buttons` key,\n  // or additional `style` / `className` settings.\n  generateNodeProps?: (params: GenerateNodePropsParams) => any\n\n  treeNodeRenderer?: any\n\n  // Override the default component for rendering nodes (but keep the scaffolding generator)\n  // This is an advanced option for complete customization of the appearance.\n  // It is best to copy the component in `node-renderer-default.js` to use as a base, and customize as needed.\n  nodeContentRenderer?: any\n\n  // Override the default component for rendering an empty tree\n  // This is an advanced option for complete customization of the appearance.\n  // It is best to copy the component in `placeholder-renderer-default.js` to use as a base,\n  // and customize as needed.\n  placeholderRenderer?: any\n\n  theme?: {\n    style: any\n    innerStyle: any\n    scaffoldBlockPxWidth: number\n    slideRegionSize: number\n    treeNodeRenderer: any\n    nodeContentRenderer: any\n    placeholderRenderer: any\n  }\n\n  // Sets the height of a given tree row item in pixels. Can either be a number\n  // or a function to calculate dynamically\n  rowHeight?: number | ((treeIndex: number, node: any, path: any[]) => number)\n\n  // Determine the unique key used to identify each node and\n  // generate the `path` array passed in callbacks.\n  // By default, returns the index in the tree (omitting hidden nodes).\n  getNodeKey?: (node) => string\n\n  // Called whenever tree data changed.\n  // Just like with React input elements, you have to update your\n  // own component's data to see the changes reflected.\n  onChange: (treeData, event: { changeActionType: ChangeAction }) => void\n\n  // Called after node move operation.\n  onMoveNode?: (params: OnMoveNodeParams) => void\n\n  // Determine whether a node can be dragged. Set to false to disable dragging on all nodes.\n  canDrag?: (params: GenerateNodePropsParams) => boolean\n\n  // Determine whether a node can be dropped based on its path and parents'.\n  canDrop?: (params: CanDropParams) => boolean\n\n  // Determine whether a node can have children\n  canNodeHaveChildren?: (node) => boolean\n\n  // When true, or a callback returning true, dropping nodes to react-dnd\n  // drop targets outside of this tree will not remove them from this tree\n  shouldCopyOnOutsideDrop?:\n    | ((params: ShouldCopyOnOutsideDropParams) => boolean)\n    | boolean\n\n  // Called after children nodes collapsed or expanded.\n  onVisibilityToggle?: (params: OnVisibilityToggleParams) => void\n\n  dndType?: string\n\n  // Called to track between dropped and dragging\n  onDragStateChanged?: (params: OnDragStateChangedParams) => void\n\n  // Specify that nodes that do not match search will be collapsed\n  onlyExpandSearchedNodes?: boolean\n\n  // rtl support\n  rowDirection?: string\n\n  debugMode?: boolean\n\n  overscan?: number | { main: number; reverse: number }\n}\n\nReactSortableTree.defaultProps = {\n  canDrag: true,\n  canDrop: undefined,\n  canNodeHaveChildren: () => true,\n  className: '',\n  dndType: undefined,\n  generateNodeProps: undefined,\n  getNodeKey: defaultGetNodeKey,\n  innerStyle: {},\n  maxDepth: undefined,\n  treeNodeRenderer: undefined,\n  nodeContentRenderer: undefined,\n  onMoveNode: () => {},\n  onVisibilityToggle: () => {},\n  placeholderRenderer: undefined,\n  scaffoldBlockPxWidth: undefined,\n  searchFinishCallback: undefined,\n  searchFocusOffset: undefined,\n  searchMethod: undefined,\n  searchQuery: undefined,\n  shouldCopyOnOutsideDrop: false,\n  slideRegionSize: undefined,\n  style: {},\n  theme: {},\n  onDragStateChanged: () => {},\n  onlyExpandSearchedNodes: false,\n  rowDirection: 'ltr',\n  debugMode: false,\n  overscan: 0,\n  virtuaRef: undefined,\n}\n\nexport const SortableTreeWithoutDndContext = (\n  props: ReactSortableTreeProps\n) => {\n  return (\n    <DndContext.Consumer>\n      {({ dragDropManager }) =>\n        dragDropManager === undefined ? undefined : (\n          <ReactSortableTree {...props} dragDropManager={dragDropManager} />\n        )\n      }\n    </DndContext.Consumer>\n  )\n}\n\nexport const SortableTree = (props: ReactSortableTreeProps) => {\n  return (\n    <DndProvider debugMode={props.debugMode} backend={HTML5Backend}>\n      <SortableTreeWithoutDndContext {...props} />\n    </DndProvider>\n  )\n}\n"],"names":["defaultProps","dragSource","dropTarget","TreeNode"],"mappings":"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"}